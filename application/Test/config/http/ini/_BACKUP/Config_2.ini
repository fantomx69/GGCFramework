;
; NOTA :
; In futuro spostare la configurazione in un file XML che permette di edificare
; una struttura gerarchica, che qui posso solo simulare.
;
; NOTA :
; Nelle sezioni delle entità, far specificare anche quali metodi delle classi
; model/entity possono essere acceduti via SOAP web service.
; 

;-------------------------------------------------------------------------------
;                             [ Sezione Generale ]
;-------------------------------------------------------------------------------

[General]
ServerDocumentRootPath = 'C:/xampp/htdocs/'

FrameworkRootPath = 'GGC_Framework/'
FrameworkLibPath = 'GGC_lib/'
FrameworkLibCorePath = 'core/'
FrameworkLibUtilPath = 'util/'

ApplicationName = 'Test'
ApplicationRootPath = 'GGC_Framework/application/Test/'
ApplicationLibPath = 'GGC_lib/'
ApplicationLibCorePath = 'core/'
ApplicationLibUtilPath = 'util/'
ApplicationConfigPath = 'config/http/'
ApplicationCachePath = 'cache/'
ApplicationControllerPath = 'controller/http/'
ApplicationEntityPath = 'entity/'
ApplicationModelPath = 'model/'
ApplicationViewPath = 'view/http/'
ApplicationViewTemplatePath = 'template/'
ApplicationViewHtmlPath = 'html/'
ApplicationViewPhpPath = 'php/'
ApplicationViewTxtPath = 'txt/'

; Default entity value.
; Può contenere un valore che specifica una virtual entity (Se c'è poi la corrispondenza
; con quella reale) oppure può contenere direttamente quella reale.
DefaultEntity = 'index' 

; Default global request type
RequestType = sync ;async

; Per il tipo di risposta possiamo usare sia solo il ResponseDataType che anche
; ResponseDataExchangeProtocol. Se susiamo solo il primo possiamo prestabilire
; file fisici o routine atte a restituire il tipo di formato corretto. Volendo
; anche per la seconda cosa potremmo prestabilire cose già pronte, ma la seconda
; , ovvero ResponseDataExchangeProtocol, serve per involucrare, avvolgere la
; prima cosa, quindi è sempre, o quasi, dinamica. Paradossalmente, potremmo
; avvolgere una colmunicazione rss in una json e viceversa. Ovviamante, possiamo
; avvolgere html, xml, txt, ecc... in una json, rss, soap, ecc..., quindi nella
; richiesta, anche se asincrona, io potrei richiedere una risposta con
; ResponseDataType=html e ResponseDataExchangeProtocol=json.

; Default global response data type
ResponseDataTypeSync = html
ResponseDataTypeAsync = json

; Default global response data exchange protocol.
; 'rss', come anche json può fungere sia da tipo dati che da tipo di protocollo
; scambio dati, evvero, entrambi possono essere incapusali o encoded l'uno
; nell'altro.
ResponseDataExchangeProtocolSYNC = ;NULL=Normale=il predefinito secondo il tipo
                                   ;di dato richiesto, json, soap, rss, ecc...
ResponseDataExchangeProtocolASYNC = ;NULL=Normale, json, soap, rss, ecc...

; Configurazione globale per specificare se le entità ed acton possono accedute,
; e quindi, espresse dal client nelle forma reale, o devono passare per forza
; attraverso i nomi virtuali.
RealEntityNameDirectAccess = 0 ;true=1/False=0
RealActionNameDirectAccess = 0 ;true=1/False=0

; Prefisso e suffisso parametri di lavoro
WorkParamRequestPrefix = GGC_
WorkParamRequestSuffix = ;_ggc

; Prefisso e suffisso model
ModelPrefix = M_
ModelSuffix = ;_M

; Prefisso e suffisso data model
DataModelPrefix = DM_
DataModelSuffix = ;_DM

; Prefisso e suffisso view
ViewPrefix = v_
ViewSuffix = ;_v

; Prefisso e suffisso control
ControllerPrefix = C_
ControllerSuffix = ;_C

; Prefisso e suffisso entity
EntityPrefix = E_
EntitySuffix = ;_E

; Valori globali gestione cache di risposta. Questi valori possono essere
; ridefiniti/sovrascritti nelle singole entità. Per quel che riguarda i template,
; impostare nelle sezioni dei rispettivi template, se aderiscono o meno alla
; gestione del caching. Quindi, per quel che riguarda i template, ci sarà un
; primo valore globale, sovrasritto da quello specificato nelle sezioni template,
; il quale, a sua volta, verrà sovrascritto da quello specificato nelle sezioni
; delle entità.
[General->ResponseCache]
OutputCache = 1 ;true=1/False=0
DataCache = 0 ;true=1/False=0

[General->ResponseCache->Output]
CacheSaveProvider = 11 ;11=CP_FILE, 12=CP_DB

PhpFileCacheOrigin = 1 ;true=1/False=0
TemplateFileCacheOrigin = 1 ;true=1/False=0

UpdateInterval = 5 ;minuti prima che la cache venga aggiornata, anche se il/i valore/i
             ;discriminante/i non cambia.

; Discriminante per aggiornamento cache.
; ? = un solo file
; * = tanti file quanti params diversi
; <nome1>;<nome...n> = tanti file quanti i parametri specificati
; vuoto = nessuna gestione cache con discriminante attraverso i parametri.
UpdateByParams = ?
UpdateByHeaders =
UpdateByControls =
UpdateByContentEncoding =
;UpdateByCustom =

[General->ResponseCache->Data]
;
;
;

[General->Session]
SavePath = ''

; Comportamento predefinito in caso di errori/eccezioni generate dal framework.
; Possibili valori di ResponseAction : false, die, error, exception, page redirect o forward
; Possibili valori Verbosity = OFF, LOW, MEDIUM, HIGH, ALL
; Possibili valori di Log = trace file | e-mail | sms
[General->FrameworkThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =
LogEMail =
LogSms =


; Comportamento predefinito in caso di errori/eccezioni generate dal framework.
; Possibili valori di ResponseAction : die, page redirect o forward
; Possibili valori Verbosity = OFF, LOW, MEDIUM, HIGH, ALL
; Possibili valori di Log = trace file | e-mail | sms
[General->OtherThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =
LogEMail =
LogSms =


; Comportamento predefinito in caso di errori/eccezioni standard o di SPL

; Tipi di formato protocollo scambio dati
[General->ResponseDataExchangeProtocol]
0 = 
1 = json
2 = soap
3 = rss

; All Response data type
;ResponseDataType = 'html|xhtml|html5|xml|json|rss|csv|txt|empty|null'
[General->ResponseDataType]
0 = html
1 = xhtml
2 = html5
3 = xml
4 = json
5 = rss
6 = csv
7 = txt
8 = empty
9 = null

; Origine tipi dato risposta.
; Per quando riguarda i file proviene dalla struttura della cartella "view".
; Per quando riguarda la memoria, viene gestita internamente al programma.
; Questa può essere utilizzata anche per avere un ordne di applicazione.
;ResponseDataTypeOriginFileStream = 'template|php|html|txt'
;[General->ResponseDataTypeFileStreamOrigin]
;0 = template
;1 = php
;2 = html
;3 = txt
[General->ResponseDataTypeServerSideFileStreamOrigin]
0 = template
1 = php

[General->ResponseDataTypeClientSideFileStreamOrigin]
0 = html
1 = xhtml
2 = html5
3 = xml
4 = json
5 = rss
6 = csv
7 = txt

[General->ResponseDataTypeCodeInterpretationSide]
0 = server
1 = client

; Stream origine tipo dato risposta.
; Questa può essere utilizzata anche per avere un ordne di applicazione.
;ResponseDataTypeStreamOrigin = 'file|mem'
[General->ResponseDataTypeStreamOrigin]
0 = file
1 = mem


;-------------------------------------------------------------------------------
;                            [ Sezione Templates ]
;-------------------------------------------------------------------------------

[Template]
TemplateName = Smarty ;Twig, GGC, ecc...

[Template->Smarty]
SmartyTemplateDir = 'view/http/template/smarty_template/templates/'
SmartyCompileDir = 'view/http/template/smarty_template/templates_c/'
SmartyCacheDir = 'view/http/template/smarty_template/cache/'
SmartyFileExt = tpl
TemplateFileCacheSourceType = 1

[Template->Twig]
TwigTemplateDir =
TwigTemplateFileExt =

[Template->GGC]
GGC_TemplateDir = 'view/http/template/GGC_template'
GGC_TemplateFileExt = phtml


;-------------------------------------------------------------------------------
;                         [ Sezione Entità / Bindings]
;-------------------------------------------------------------------------------

; Si può utilizzare questa lista per permettere l'accesso o meno a determinate
; entità in modo semplice, senza cancellare o rinominare file, o addirittura,
; agire da codice.
; Se la lista è valorizzata la si considera, altrimenti si ha libero accesso
; alle entità, conoscendo ovviemente il loro nome.
[ValidVirtualEntities]
;0 = index
;1 = login
;2 = logout
;3 = ditta

; Si può utilizzare questa lista per per mettere l'accesso o meno a determinate
; entità in modo semplice, senza cancellare o rinominare file, o addirittura,
; agire da codice.
; Se la lista è valorizzata la si considera, altrimenti si ha libero accesso
; alle entità, conoscendo ovviemente il loro nome.
[ValidRealEntities]
;0 = Index
;1 = Login
;2 = Logout

; Associazione tra il nome entità specificato nell'url e il nome della classe
; entità reale.
[VirtualEntityToRealEntityBinding]
index = Index
home = Index
login = Login
logout = Logout
ditta = Ditta
prova_forward = ProvaForward
prova_get = ProvaGet

[RealEntityToControllerBinding]
Index = Index
Login = Login
Logout = Logout
Ditta = Ditta
ProvaForward = ProvaForward
ProvaGet = ProvaGet

;-------------------------------------------------------------------------------
;                          [ Inizio Sezioni Entità ]
;-------------------------------------------------------------------------------

; Queste sono le sezioni inerenti le entità del programma, a cui fanno capo i
; controller e quindi le pagine. In queste sezioni posso ridefinire molti dei
; valori dichiarati nella sezione "Generale", e i valori qui ridefiniti avranno
; la precedenza su quelli generali.

;-------------------------------------------------------------------------------
;                              [ Entità Login ]
;-------------------------------------------------------------------------------

[Login]
;ResponseDataTypeSync = html
;ResponseDataTypeAsync = json
;ResponseDataExchangeProtocolSYNC = 
;ResponseDataExchangeProtocolASYNC = json
;RealActionNameDirectAccess = 1 ;true=1/False=0

DefaultAction = login

[Login->FrameworkThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


[Login->OtherThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


[Login->ValidHttpRequestMethods]

[Login->ValidVirtualActions]
;0 = login

[Login->ValidRealActions]
;0 = r_login

[Login->VirtualActionToRealActionBinding]
login = r_login

[Login->RealActionToPageBinding]
r_login = login

[Login->RealActionToFunctionBinding]


;-------------------------------------------------------------------------------
;                              [ Entità Index ]
;-------------------------------------------------------------------------------
; NOTA :
; In futuro, se si presenterà la necessità, si potrebbero suddividere le sezioni
; [Virtual...] e [Real...] tra le azioni di pagina e le azioni di funzione. Per
; ora sono accorpate.

[Index]
;ResponseDataTypeSync = html
;ResponseDataTypeAsync = json
;ResponseDataExchangeProtocolSYNC = 
;ResponseDataExchangeProtocolASYNC = json
;RealActionNameDirectAccess = ;true=1/False=0

DefaultAction = index

[Index->FrameworkThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


[Index->OtherThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


[Index->ValidHttpRequestMethods]

; Se esistono vengono considerati.
[Index->ValidVirtualActions]
;0 = index
;1 = svr_name
;2 = data_ora

; Se esistono vengono considerati.
[Index->ValidRealActions]
;0 = r_index
;1 = getSvrName
;2 = getDataTime

[Index->VirtualActionToRealActionBinding]
index = r_index

data_ora = r_data_ora
saluto = r_saluto


svr_name = r_getSvrName
DataOra = r_getDateTime

; NOTA :
; Per associare alle view in memoria, basta specificare nomi di file fisici
; inesistenti.
[Index->RealActionToPageBinding]
r_index = index

r_data_ora = vm_getDateTime
r_saluto = vm_getGreeting

[Index->RealActionToFunctionBinding]
r_getSvrName = getServerName
r_getDateTime = getDateTime

;-------------------------------------------------------------------------------
;                              [ Entità Logout ]
;-------------------------------------------------------------------------------

[Logout]
;ResponseDataTypeSync = html
;ResponseDataTypeAsync = json
;ResponseDataExchangeProtocolSYNC = 
;ResponseDataExchangeProtocolASYNC = json
;RealActionNameDirectAccess = ;true=1/False=0

DefaultAction = logout

[Logout->FrameworkThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


[Logout->OtherThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


[Logout->ValidHttpRequestMethods]

[Logout->ValidVirtualActions]

[Logout->ValidRealActions]

[Logout->VirtualActionToRealActionBinding]
logout = r_logout

[Logout->RealActionToPageBinding]
r_logout = logout

[Logout->RealActionToFunctionBinding]


;-------------------------------------------------------------------------------
;                              [ Entità Ditta ]
;-------------------------------------------------------------------------------

[Ditta]
; Ridefinizione parametri globali
;ResponseDataTypeSync = html
;ResponseDataTypeAsync = json
;ResponseDataExchangeProtocolSYNC = 
;ResponseDataExchangeProtocolASYNC = json
;RealActionNameDirectAccess = ;true=1/False=0

; Azione di default; se non viene specificata, il risultato è quello ottenuto
; dal processo di selezione output standard senza l'immissione in esso di dati
; aggiuntivi. Quindi per ogni entità deve essere sempre presente una pagina con
; lo stesso nome che può essere vuota oppure contenere informazioni generali e
; link per le azioni consentite;
DefaultAction = ditta

[Ditta->FrameworkThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


[Ditta->OtherThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


; Metodi http validi per questa entità. Se valorizzata viene considerata.
; post, get, head, ecc...
[Ditta->ValidHttpRequestMethods]

; Nomi azioni provenienti dal client, mappate poi su quelle reali.
; Se per una reale non esiste la mappatura a quella virtuale, vuol dir che sono
; uguali.
[Ditta->ValidVirtualActions]


; Azioni valide accettate dall'entità. Per ora il nome ddell'azione sarà uguale
; al nome della funzione che lo rappresenta, per una maggiore faclità di imple-
; mentazione, ma in futuro verrà messo un mapping tra il nome delle azione e le
; funzioni corrispondenti, compreso anche i parametri che possono essere passati
; e il loro tipo;
;ValidRealActions = 'ditta|browse|add|ins|mod|del|order|filter'
[Ditta->ValidRealActions]
0 = r_ditta
;1 = r_browse
;2 = r_add
;3 = r_ins
;4 = r_mod
;5 = r_del
;6 = r_order
;7 = r_filter

[Ditta->VirtualActionToRealActionBinding]
ditta = r_ditta

; Serve per associare la action dell'entity nel caso la action rappresenterebbe
; una pagina e questa avesse nome diverso dalla action. Si dovrebbe prima
; controllare questa lista e poi fare la ricerca per nome file.
[Ditta->RealActionToPageBinding]
r_ditta = ditta
;browse = browse_abcd

; Serve per associare la action dell'entity nel caso la action rappresenterebbe
; una funzione e questa avesse nome diverso dalla action. Si dovrebbe prima
; controllare questa lista e poi fare la ricerca per reflection o chiamare
; direttamente la funzione e gestire l'eventuale errore in caso di non presenza
; , appunto, della funzione. Interpretando il valore sulla destra, possiamo
; ricavare il nome funzione e i parametri e quindi controllare che il numero
; dei parametri sia corretto. Il tipo dei parametri verrà in vece forzato nella
; funzione stessa;
[Ditta->RealActionToFunctionBinding]
;num_cli = 'getNRecDitta param1 param2 param...'


;-------------------------------------------------------------------------------
;                              [ Entità ProvaForward ]
;-------------------------------------------------------------------------------

[ProvaForward]
DefaultAction = prova_forward

[ProvaForward->FrameworkThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =

[ProvaForward->OtherThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


; Metodi http validi per questa entità. Se valorizzata viene considerata.
; post, get, head, ecc...
[ProvaForward->ValidHttpRequestMethods]

; Nomi azioni provenienti dal client, mappate poi su quelle reali.
; Se per una reale non esiste la mappatura a quella virtuale, vuol dir che sono
; uguali.
[ProvaForward->ValidVirtualActions]


; Azioni valide accettate dall'entità. Per ora il nome ddell'azione sarà uguale
; al nome della funzione che lo rappresenta, per una maggiore faclità di imple-
; mentazione, ma in futuro verrà messo un mapping tra il nome delle azione e le
; funzioni corrispondenti, compreso anche i parametri che possono essere passati
; e il loro tipo;
;ValidRealActions = 'ditta|browse|add|ins|mod|del|order|filter'
[ProvaForward->ValidRealActions]
;0 = r_prova_forward
;1 = r_browse
;2 = r_add
;3 = r_ins
;4 = r_mod
;5 = r_del
;6 = r_order
;7 = r_filter

[ProvaForward->VirtualActionToRealActionBinding]
prova_forward = r_prova_forward

; Serve per associare la action dell'entity nel caso la action rappresenterebbe
; una pagina e questa avesse nome diverso dalla action. Si dovrebbe prima
; controllare questa lista e poi fare la ricerca per nome file.
[ProvaForward->RealActionToPageBinding]
r_prova_forward = vm_provaForward

; Serve per associare la action dell'entity nel caso la action rappresenterebbe
; una funzione e questa avesse nome diverso dalla action. Si dovrebbe prima
; controllare questa lista e poi fare la ricerca per reflection o chiamare
; direttamente la funzione e gestire l'eventuale errore in caso di non presenza
; , appunto, della funzione. Interpretando il valore sulla destra, possiamo
; ricavare il nome funzione e i parametri e quindi controllare che il numero
; dei parametri sia corretto. Il tipo dei parametri verrà in vece forzato nella
; funzione stessa;
[ProvaForward->RealActionToFunctionBinding]
;num_cli = 'getNRecDitta param1 param2 param...'


;-------------------------------------------------------------------------------
;                              [ Entità ProvaGet ]
;-------------------------------------------------------------------------------

[ProvaGet]
DefaultAction = prova_get

[ProvaGet->FrameworkThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =

[ProvaGet->OtherThrowAnomalies]
ResponseAction = die
Vebosity = medium
Message = 'Ci scusiamo per il problema che sarà risolto al più presto!'
Log = 
RedirectEntity =
ForwardEntity =


; Metodi http validi per questa entità. Se valorizzata viene considerata.
; post, get, head, ecc...
[ProvaGet->ValidHttpRequestMethods]

; Nomi azioni provenienti dal client, mappate poi su quelle reali.
; Se per una reale non esiste la mappatura a quella virtuale, vuol dir che sono
; uguali.
[ProvaGet->ValidVirtualActions]


; Azioni valide accettate dall'entità. Per ora il nome ddell'azione sarà uguale
; al nome della funzione che lo rappresenta, per una maggiore faclità di imple-
; mentazione, ma in futuro verrà messo un mapping tra il nome delle azione e le
; funzioni corrispondenti, compreso anche i parametri che possono essere passati
; e il loro tipo;
;ValidRealActions = 'ditta|browse|add|ins|mod|del|order|filter'
[ProvaGet->ValidRealActions]
;0 = r_prova_forward
;1 = r_browse
;2 = r_add
;3 = r_ins
;4 = r_mod
;5 = r_del
;6 = r_order
;7 = r_filter

[ProvaGet->VirtualActionToRealActionBinding]
prova_get = r_prova_get

; Serve per associare la action dell'entity nel caso la action rappresenterebbe
; una pagina e questa avesse nome diverso dalla action. Si dovrebbe prima
; controllare questa lista e poi fare la ricerca per nome file.
[ProvaGet->RealActionToPageBinding]
r_prova_get = provaGet

; Serve per associare la action dell'entity nel caso la action rappresenterebbe
; una funzione e questa avesse nome diverso dalla action. Si dovrebbe prima
; controllare questa lista e poi fare la ricerca per reflection o chiamare
; direttamente la funzione e gestire l'eventuale errore in caso di non presenza
; , appunto, della funzione. Interpretando il valore sulla destra, possiamo
; ricavare il nome funzione e i parametri e quindi controllare che il numero
; dei parametri sia corretto. Il tipo dei parametri verrà in vece forzato nella
; funzione stessa;
[ProvaGet->RealActionToFunctionBinding]
;num_cli = 'getNRecDitta param1 param2 param...'